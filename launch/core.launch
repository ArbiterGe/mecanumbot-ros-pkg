<?xml version="1.0"?>

<launch>
	<!-- roscore automatically started by roslaunch -->
	
	<!-- start publishing transforms -->
	<arg name="model" />
	<arg name="gui" default="False" />
	<param name="robot_description" textfile="$(find mecanumbot)/extra/mecanumbot.urdf" />
	<param name="use_gui" value="$(arg gui)" />
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />
	
	<!-- start odom converter -->
	<!--<node pkg="mecanumbot" type="odometry_publisher" name="odometry_publisher" output="screen">
		<param name="~scale_x" value="0.000885" />
		<param name="~scale_th" value="0.0032" />
	</node>-->
	
	<!-- laser scan matching odom -->
	<!--<node pkg="laser_scan_matcher" type="laser_scan_matcher_node" name="laser_scan_matcher_node" output="screen">
		<param name="fixed_frame" value = "odom"/>
		<param name="use_imu" value = "false"/>
		<param name="use_odom" value = "false"/>
		<param name="max_iterations" value="10"/>
	</node>-->
	
	<!-- start arduino -->
	<!--<node pkg="rosserial_python" type="serial_node.py" name="rosserial_controller" output="screen">
		<param name="~port" value="/dev/arduino" />
		<param name="~baud" value="57600" />
	</node>-->
	
	<!-- start kinect -->
	<!--<include file="$(find openni_launch)/launch/openni.launch" />
	<node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle openni_manager" respawn="true">
		<param name="max_rate" value="0.5"/>
		<remap from="cloud_in" to="/camera/depth/points"/>
		<remap from="cloud_out" to="cloud_throttled"/>
	</node>-->
	
	<!-- start laser -->
	<!--<node pkg="neato_xv11_lds" type="neato_xv11_lds_publisher" name="neato_xv11_lds_publisher">
		<param name="~port" value="/dev/laser" />
	</node>-->
	<!--<node pkg="xv_11_laser_driver" type="neato_laser_publisher" name="neato_laser_publisher">
		<param name="~port" value="/dev/laser" />
		<param name="~frame_id" value="/base_laser" />
		<param name="~firmware_version" value="2" />
	</node>-->
</launch>
